#!/bin/bash
set -e

AWKPATH=$(dirname $0)

# Usage:
# 	list [devices|devicetypes|runtimes] - show all SDKs, Devices, and Device Types
# 	find "Device Name" - find a device with the given name and print the identifier
#       reset "Device Name" - reset a device with the given name
#       create "Device Name" [iOS-8-X|iOS-7-X] [iPhone-4s|iPhone-5|Resizable-iPhone|...(See device types)]
#       destroy "Device Name" - Destroy the device (delete it)
#       delete  "Device Name" - (Matches underlying simctl command)

# Get a simulator by name, e.g.
# iPhone 4s -> 124EA-6CDF...
function simulator_id_from_name() {
  shift
  simname="$@"
  SIMULATOR_ID=$(xcrun simctl list devices | awk -f $AWKPATH/get-device.awk -v simname="$simname")
}

command="$1"
case "$command" in
"" | "-h" | "--help" )
  cat <<END
Usage:
	list [devices|devicetypes|runtimes] - show all SDKs, Devices, and Device Types
	find "Device Name" - find a device with the given name and print the identifier
	reset "Device Name" - reset a device with the given name
	create "Device Name" [iOS-8-X|iOS-7-X] [iPhone-4s|iPhone-5|Resizable-iPhone|...(See device types)]
	destroy "Device Name" - Destroy the device (delete it)
	delete  "Device Name" - (Matches underlying simctl command)
END
echo $HELP
  ;;
"list" )
  shift
  xcrun simctl list $@ | awk -F"\n" -f $AWKPATH/pretty-list.awk
  ;;
"find" )
  simulator_id_from_name $@
  echo $SIMULATOR_ID
  ;;
"reset" )
  simulator_id_from_name $@
  xcrun simctl erase $SIMULATOR_ID
  ;;
"create" )
  shift
  xcrun simctl create "$1" "com.apple.CoreSimulator.SimDeviceType.$2" "com.apple.CoreSimulator.SimRuntime.$3"
  ;;
"destroy" | "delete" )
  simulator_id_from_name $@
  xcrun simctl delete $SIMULATOR_ID
  ;;
* )
  echo "Command not found!"
  exit 1
  ;;
esac
